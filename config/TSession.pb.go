// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: TSession.proto

package config

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TSessionSessionType int32

const (
	TSession_CONNECTOR TSessionSessionType = 0
	TSession_LOGIC     TSessionSessionType = 1
	TSession_CMD       TSessionSessionType = 2
)

// Enum value maps for TSessionSessionType.
var (
	TSessionSessionType_name = map[int32]string{
		0: "CONNECTOR",
		1: "LOGIC",
		2: "CMD",
	}
	TSessionSessionType_value = map[string]int32{
		"CONNECTOR": 0,
		"LOGIC":     1,
		"CMD":       2,
	}
)

func (x TSessionSessionType) Enum() *TSessionSessionType {
	p := new(TSessionSessionType)
	*p = x
	return p
}

func (x TSessionSessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TSessionSessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSession_proto_enumTypes[0].Descriptor()
}

func (TSessionSessionType) Type() protoreflect.EnumType {
	return &file_TSession_proto_enumTypes[0]
}

func (x TSessionSessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TSessionSessionType.Descriptor instead.
func (TSessionSessionType) EnumDescriptor() ([]byte, []int) {
	return file_TSession_proto_rawDescGZIP(), []int{0, 0}
}

type TSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid          string              `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	SrcSubRouter string              `protobuf:"bytes,2,opt,name=srcSubRouter,proto3" json:"srcSubRouter,omitempty"`
	DstSubRouter string              `protobuf:"bytes,3,opt,name=dstSubRouter,proto3" json:"dstSubRouter,omitempty"`
	Body         []byte              `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	St           TSessionSessionType `protobuf:"varint,5,opt,name=st,proto3,enum=config.TSessionSessionType" json:"st,omitempty"`
	ReplyToken   string              `protobuf:"bytes,6,opt,name=replyToken,proto3" json:"replyToken,omitempty"`
	Router       string              `protobuf:"bytes,7,opt,name=router,proto3" json:"router,omitempty"`
	LogicBindId  string              `protobuf:"bytes,8,opt,name=logicBindId,proto3" json:"logicBindId,omitempty"`
	RpcRespCode  int32               `protobuf:"varint,9,opt,name=rpcRespCode,proto3" json:"rpcRespCode,omitempty"`
}

func (x *TSession) Reset() {
	*x = TSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSession_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSession) ProtoMessage() {}

func (x *TSession) ProtoReflect() protoreflect.Message {
	mi := &file_TSession_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSession.ProtoReflect.Descriptor instead.
func (*TSession) Descriptor() ([]byte, []int) {
	return file_TSession_proto_rawDescGZIP(), []int{0}
}

func (x *TSession) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *TSession) GetSrcSubRouter() string {
	if x != nil {
		return x.SrcSubRouter
	}
	return ""
}

func (x *TSession) GetDstSubRouter() string {
	if x != nil {
		return x.DstSubRouter
	}
	return ""
}

func (x *TSession) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *TSession) GetSt() TSessionSessionType {
	if x != nil {
		return x.St
	}
	return TSession_CONNECTOR
}

func (x *TSession) GetReplyToken() string {
	if x != nil {
		return x.ReplyToken
	}
	return ""
}

func (x *TSession) GetRouter() string {
	if x != nil {
		return x.Router
	}
	return ""
}

func (x *TSession) GetLogicBindId() string {
	if x != nil {
		return x.LogicBindId
	}
	return ""
}

func (x *TSession) GetRpcRespCode() int32 {
	if x != nil {
		return x.RpcRespCode
	}
	return 0
}

type CmdMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunRoutineNum int64  `protobuf:"varint,1,opt,name=runRoutineNum,proto3" json:"runRoutineNum,omitempty"`
	Data          []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CmdMsg) Reset() {
	*x = CmdMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSession_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdMsg) ProtoMessage() {}

func (x *CmdMsg) ProtoReflect() protoreflect.Message {
	mi := &file_TSession_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdMsg.ProtoReflect.Descriptor instead.
func (*CmdMsg) Descriptor() ([]byte, []int) {
	return file_TSession_proto_rawDescGZIP(), []int{1}
}

func (x *CmdMsg) GetRunRoutineNum() int64 {
	if x != nil {
		return x.RunRoutineNum
	}
	return 0
}

func (x *CmdMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_TSession_proto protoreflect.FileDescriptor

var file_TSession_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x54, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd4, 0x02, 0x0a, 0x08, 0x54, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x53, 0x75,
	0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x72, 0x63, 0x53, 0x75, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x53, 0x75, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4d, 0x44, 0x10, 0x02, 0x22,
	0x42, 0x0a, 0x06, 0x43, 0x6d, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x75, 0x6e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x72, 0x75, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x7b, 0x0a, 0x0f, 0x47, 0x72, 0x70, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61,
	0x63, 0x6b, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x01, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x50, 0x43, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x10, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x10,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_TSession_proto_rawDescOnce sync.Once
	file_TSession_proto_rawDescData = file_TSession_proto_rawDesc
)

func file_TSession_proto_rawDescGZIP() []byte {
	file_TSession_proto_rawDescOnce.Do(func() {
		file_TSession_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSession_proto_rawDescData)
	})
	return file_TSession_proto_rawDescData
}

var file_TSession_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_TSession_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_TSession_proto_goTypes = []interface{}{
	(TSessionSessionType)(0), // 0: config.TSession.sessionType
	(*TSession)(nil),         // 1: config.TSession
	(*CmdMsg)(nil),           // 2: config.CmdMsg
}
var file_TSession_proto_depIdxs = []int32{
	0, // 0: config.TSession.st:type_name -> config.TSession.sessionType
	1, // 1: config.GrpcNodeService.PushPack:input_type -> config.TSession
	1, // 2: config.GrpcNodeService.RequestRPCPack:input_type -> config.TSession
	1, // 3: config.GrpcNodeService.PushPack:output_type -> config.TSession
	1, // 4: config.GrpcNodeService.RequestRPCPack:output_type -> config.TSession
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_TSession_proto_init() }
func file_TSession_proto_init() {
	if File_TSession_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_TSession_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSession_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSession_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_TSession_proto_goTypes,
		DependencyIndexes: file_TSession_proto_depIdxs,
		EnumInfos:         file_TSession_proto_enumTypes,
		MessageInfos:      file_TSession_proto_msgTypes,
	}.Build()
	File_TSession_proto = out.File
	file_TSession_proto_rawDesc = nil
	file_TSession_proto_goTypes = nil
	file_TSession_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GrpcNodeServiceClient is the client API for GrpcNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcNodeServiceClient interface {
	PushPack(ctx context.Context, opts ...grpc.CallOption) (GrpcNodeService_PushPackClient, error)
	RequestRPCPack(ctx context.Context, in *TSession, opts ...grpc.CallOption) (*TSession, error)
}

type grpcNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcNodeServiceClient(cc grpc.ClientConnInterface) GrpcNodeServiceClient {
	return &grpcNodeServiceClient{cc}
}

func (c *grpcNodeServiceClient) PushPack(ctx context.Context, opts ...grpc.CallOption) (GrpcNodeService_PushPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcNodeService_serviceDesc.Streams[0], "/config.GrpcNodeService/PushPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcNodeServicePushPackClient{stream}
	return x, nil
}

type GrpcNodeService_PushPackClient interface {
	Send(*TSession) error
	Recv() (*TSession, error)
	grpc.ClientStream
}

type grpcNodeServicePushPackClient struct {
	grpc.ClientStream
}

func (x *grpcNodeServicePushPackClient) Send(m *TSession) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcNodeServicePushPackClient) Recv() (*TSession, error) {
	m := new(TSession)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcNodeServiceClient) RequestRPCPack(ctx context.Context, in *TSession, opts ...grpc.CallOption) (*TSession, error) {
	out := new(TSession)
	err := c.cc.Invoke(ctx, "/config.GrpcNodeService/RequestRPCPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcNodeServiceServer is the server API for GrpcNodeService service.
type GrpcNodeServiceServer interface {
	PushPack(GrpcNodeService_PushPackServer) error
	RequestRPCPack(context.Context, *TSession) (*TSession, error)
}

// UnimplementedGrpcNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcNodeServiceServer struct {
}

func (*UnimplementedGrpcNodeServiceServer) PushPack(GrpcNodeService_PushPackServer) error {
	return status.Errorf(codes.Unimplemented, "method PushPack not implemented")
}
func (*UnimplementedGrpcNodeServiceServer) RequestRPCPack(context.Context, *TSession) (*TSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRPCPack not implemented")
}

func RegisterGrpcNodeServiceServer(s *grpc.Server, srv GrpcNodeServiceServer) {
	s.RegisterService(&_GrpcNodeService_serviceDesc, srv)
}

func _GrpcNodeService_PushPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcNodeServiceServer).PushPack(&grpcNodeServicePushPackServer{stream})
}

type GrpcNodeService_PushPackServer interface {
	Send(*TSession) error
	Recv() (*TSession, error)
	grpc.ServerStream
}

type grpcNodeServicePushPackServer struct {
	grpc.ServerStream
}

func (x *grpcNodeServicePushPackServer) Send(m *TSession) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcNodeServicePushPackServer) Recv() (*TSession, error) {
	m := new(TSession)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcNodeService_RequestRPCPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcNodeServiceServer).RequestRPCPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.GrpcNodeService/RequestRPCPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcNodeServiceServer).RequestRPCPack(ctx, req.(*TSession))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.GrpcNodeService",
	HandlerType: (*GrpcNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestRPCPack",
			Handler:    _GrpcNodeService_RequestRPCPack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushPack",
			Handler:       _GrpcNodeService_PushPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "TSession.proto",
}
